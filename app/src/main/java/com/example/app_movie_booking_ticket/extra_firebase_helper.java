package com.example.app_movie_booking_ticket;

import androidx.annotation.NonNull;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

/**
 * L·ªõp firebase_helper ch·ª©a c√°c l·ªánh c∆° b·∫£n ƒë·ªÉ thao t√°c v·ªõi Firebase Realtime Database.
 * (M·∫´u minh h·ªça, ch∆∞a c·∫ßn ch·∫°y)
 */
public class extra_firebase_helper {

    private final DatabaseReference rootRef;

    // 2Ô∏è‚É£ H√†m kh·ªüi t·∫°o
    public extra_firebase_helper() {
        // L·∫•y instance c·ªßa Realtime Database
        // 1Ô∏è‚É£ Khai b√°o tham chi·∫øu ƒë·∫øn Realtime Database
        FirebaseDatabase database = FirebaseDatabase.getInstance();

        // L·∫•y reference g·ªëc (root node)
        rootRef = database.getReference();

        // B·∫°n c√≥ th·ªÉ d√πng rootRef.child("Users") ƒë·ªÉ tr·ªè t·ªõi node c·ª• th·ªÉ
    }

    // 3Ô∏è‚É£ Ghi d·ªØ li·ªáu (ghi ƒë√® node)
    public void writeData(String path, Object value) {
        rootRef.child(path).setValue(value);
    }

    // 4Ô∏è‚É£ Th√™m d·ªØ li·ªáu (t·∫°o node t·ª± ƒë·ªông b·∫±ng push ID)
    public void addData(String path, Object value) {
        rootRef.child(path).push().setValue(value);
    }

    // 5Ô∏è‚É£ ƒê·ªçc d·ªØ li·ªáu 1 l·∫ßn (ch·ªâ l·∫•y snapshot hi·ªán t·∫°i)
    public void readDataOnce(String path) {
        rootRef.child(path).addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                Object data = snapshot.getValue();
                System.out.println("Data (once) = " + data);
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                System.err.println("Error reading data: " + error.getMessage());
            }
        });
    }

    // 6Ô∏è‚É£ L·∫Øng nghe d·ªØ li·ªáu li√™n t·ª•c (real-time listener)
    public void listenData(String path) {
        rootRef.child(path).addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                Object data = snapshot.getValue();
                System.out.println("Data changed: " + data);
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                System.err.println("Listener cancelled: " + error.getMessage());
            }
        });
    }

    // 7Ô∏è‚É£ X√≥a d·ªØ li·ªáu
    public void deleteData(String path) {
        rootRef.child(path).removeValue();
    }

    // 8Ô∏è‚É£ C·∫≠p nh·∫≠t d·ªØ li·ªáu (ghi ƒë√® m·ªôt ph·∫ßn)
    public void updateData(String path, Object newValue) {
        rootRef.child(path).setValue(newValue);
    }
}

/*
  üß† G·ª£i √Ω s·ª≠ d·ª•ng:
  <p>
  Sau n√†y, khi c√≥ Activity nh∆∞ MainActivity.java, b·∫°n c√≥ th·ªÉ d√πng:
  <p>
  firebase_helper db = new firebase_helper();
  <p>
  // Ghi d·ªØ li·ªáu
  db.writeData("Users/user1/name", "Worm Wood");
  <p>
  // Th√™m m·ªõi user
  db.addData("Users", new User("Alice", 22));
  <p>
  // ƒê·ªçc 1 l·∫ßn
  db.readDataOnce("Users/user1");
  <p>
  // Theo d√µi thay ƒë·ªïi realtime
  db.listenData("Users");
  <p>
  // X√≥a d·ªØ li·ªáu
  db.deleteData("Users/user1");
 */

// v√† ta s·∫Ω kh·ªüi t·∫°o c·∫•u tr√∫c c·ªßa database chung 1 c√°ch th·ªß c√¥ng
// v√† c≈©ng s·∫Ω quy ƒë·ªãnh s∆° ƒë·ªì database c·ªßa 1 user
// c√≤n c√°c ch·ª©c nƒÉng th√™m user, x√≥a user, c≈©ng nh∆∞ c√°c tr∆∞·ªùng d·ªØ li·ªáu ·ªü b√™n trong user
// s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán qua application n√†y